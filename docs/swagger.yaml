basePath: /api
definitions:
  handlers.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterRequest:
    properties:
      city:
        type: string
      country:
        type: string
      email:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Band:
    properties:
      bio:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      looking_for:
        items:
          type: string
        type: array
      name:
        type: string
      profile_picture_url:
        type: string
      updated_at:
        type: string
    type: object
  models.BandMember:
    properties:
      band:
        $ref: '#/definitions/models.Band'
      band_id:
        type: string
      id:
        type: string
      joined_at:
        type: string
      role:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.BandResponse:
    properties:
      bio:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      looking_for:
        items:
          type: string
        type: array
      member_count:
        type: integer
      members:
        items:
          $ref: '#/definitions/models.BandMember'
        type: array
      name:
        type: string
      profile_picture_url:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateBandRequest:
    properties:
      bio:
        type: string
      city:
        type: string
      country:
        type: string
      genres:
        items:
          type: string
        type: array
      location:
        $ref: '#/definitions/models.Location'
      looking_for:
        items:
          type: string
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  models.CreatePostRequest:
    properties:
      content:
        maxLength: 2000
        minLength: 1
        type: string
      media_types:
        items:
          type: string
        type: array
      media_urls:
        items:
          type: string
        type: array
    required:
    - content
    type: object
  models.Location:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    type: object
  models.PostResponse:
    properties:
      author: {}
      author_id:
        type: string
      author_type:
        type: string
      band_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_liked:
        type: boolean
      is_reposted:
        type: boolean
      likes_count:
        type: integer
      media_types:
        items:
          type: string
        type: array
      media_urls:
        items:
          type: string
        type: array
      reposts_count:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      bio:
        type: string
      city:
        type: string
      country:
        type: string
      display_name:
        type: string
      genres:
        items:
          type: string
        type: array
      instagram_handle:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      skills:
        items:
          type: string
        type: array
      soundcloud_url:
        type: string
      spotify_url:
        type: string
    type: object
  models.User:
    properties:
      bio:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      instagram_handle:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      profile_picture_url:
        type: string
      skills:
        items:
          type: string
        type: array
      soundcloud_url:
        type: string
      spotify_url:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      bio:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      instagram_handle:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      profile_picture_url:
        type: string
      skills:
        items:
          type: string
        type: array
      soundcloud_url:
        type: string
      spotify_url:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@musicapp.com
    name: API Support
    url: https://github.com/yourusername/musicapp
  description: A social media platform for music producers to connect, collaborate,
    and discover nearby talent through location-based matching
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Music Producer Social Network API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate JWT token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid token
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to logout
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with profile information
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Authentication
  /bands:
    get:
      consumes:
      - application/json
      description: Get all bands with pagination
      parameters:
      - default: 20
        description: 'Number of bands to return (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of bands to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Bands retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid pagination parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all bands
      tags:
      - Bands
    post:
      consumes:
      - application/json
      description: Create a new band with the current user as admin
      parameters:
      - description: Band creation data
        in: body
        name: band
        required: true
        schema:
          $ref: '#/definitions/models.CreateBandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Band created successfully
          schema:
            $ref: '#/definitions/models.BandResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new band
      tags:
      - Bands
  /bands/{id}:
    get:
      consumes:
      - application/json
      description: Get band information by ID
      parameters:
      - description: Band ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Band retrieved successfully
          schema:
            $ref: '#/definitions/models.BandResponse'
        "400":
          description: Invalid band ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Band not found
          schema:
            additionalProperties: true
            type: object
      summary: Get band details
      tags:
      - Bands
  /bands/{id}/members:
    get:
      consumes:
      - application/json
      description: Get all members of a band
      parameters:
      - description: Band ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Band members retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.BandMember'
            type: array
        "400":
          description: Invalid band ID
          schema:
            additionalProperties: true
            type: object
      summary: Get band members
      tags:
      - Bands
  /feed:
    get:
      consumes:
      - application/json
      description: Get personalized feed for the authenticated user
      parameters:
      - description: Maximum number of posts to return
        example: 20
        in: query
        name: limit
        type: integer
      - description: Number of posts to skip
        example: 0
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Feed retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.PostResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user feed
      tags:
      - Posts
  /posts:
    get:
      consumes:
      - application/json
      description: Get all posts with pagination
      parameters:
      - default: 20
        description: 'Number of posts to return (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of posts to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Posts retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid pagination parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post (user or band post)
      parameters:
      - description: Post creation data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            $ref: '#/definitions/models.PostResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - Posts
  /posts/{id}/media:
    post:
      consumes:
      - multipart/form-data
      description: Upload image or audio files to an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Media file (image or audio)
        in: formData
        name: media
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Media uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid file or post ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload media to post
      tags:
      - Posts
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination
      parameters:
      - default: 20
        description: 'Number of users to return (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of users to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid pagination parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      summary: Get user profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - can only update own profile
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
  /users/{id}/bands:
    get:
      consumes:
      - application/json
      description: Get all bands that a user is a member of
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User bands retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.BandMember'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
      summary: Get user's bands
      tags:
      - Users
  /users/{id}/profile-picture:
    post:
      consumes:
      - multipart/form-data
      description: Upload a profile picture for the user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile picture image file
        in: formData
        name: profile_picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile picture uploaded successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid file or user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - can only update own profile
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload profile picture
      tags:
      - Users
  /users/nearby:
    get:
      consumes:
      - application/json
      description: Get users within a specified radius of given coordinates
      parameters:
      - description: Latitude
        example: 37.7749
        in: query
        name: lat
        required: true
        type: number
      - description: Longitude
        example: -122.4194
        in: query
        name: lng
        required: true
        type: number
      - description: Radius in kilometers
        example: 50
        in: query
        name: radius
        type: integer
      - description: Maximum number of users to return
        example: 20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Nearby users retrieved successfully
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "400":
          description: Invalid coordinates
          schema:
            additionalProperties: true
            type: object
      summary: Get nearby users
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
