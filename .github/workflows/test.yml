name: Test and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DATABASE_URL: postgres://test:testpassword@localhost:5432/musicapp_test?sslmode=disable
  REDIS_URL: redis://localhost:6379
  JWT_SECRET: test-jwt-secret-key-for-testing-only
  ENVIRONMENT: test

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build API
      run: go build -o api ./cmd/api/

    - name: Build Seeder
      run: go build -o seeder ./cmd/seeder/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: |
          api
          seeder

  test:
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: musicapp_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests with coverage
      run: |
        go test -coverprofile=coverage.out ./pkg/utils/ ./internal/service/ ./internal/models/ ./internal/config/ ./internal/middleware/ ./internal/errors/ ./internal/secrets/ ./internal/validation/
        go tool cover -func=coverage.out

    - name: Check coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${coverage}%"
        if (( $(echo "$coverage >= 80" | bc -l) )); then
          echo "✅ Coverage meets 80% requirement"
        else
          echo "❌ Coverage ${coverage}% is below 80% requirement"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run race detector
      run: go test -race ./pkg/utils/ ./internal/service/ ./internal/models/ ./internal/config/ ./internal/middleware/ ./internal/errors/ ./internal/secrets/ ./internal/validation/

    - name: Run benchmarks
      run: go test -bench=. ./pkg/utils/ ./internal/service/ ./internal/models/ ./internal/config/ ./internal/middleware/ ./internal/errors/ ./internal/secrets/ ./internal/validation/
